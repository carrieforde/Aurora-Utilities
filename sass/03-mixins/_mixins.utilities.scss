/// Always clear floats.
///
/// @group 03-utilities
///
/// @example - scss Usage
///  .clearfix {
///    @include clearfix;
///  }
///
/// @example html
///  <div class="clearfix">
///    <div style="float:left; height: 200px; width: 300px;"></div>
///  </div>
///
/// @link http://nicolasgallagher.com/micro-clearfix-hack/
@mixin clearfix {
  *zoom: 1;

  &:after,
  &:before {
    content: ' ';
    display: table;
  }

  &:after {
    clear: both;
  }
}

/// Extend an element to the edge of the viewport when the parent has a fixed width.
///
/// @group 03-utilities
///
/// @example - scss Usage
///  .full-width {
///    @include full-width;
///  }
///
/// @example html
///  <div class="full-width-parent">
///    <div class="full-width"></div>
///  </div>
///
/// @link https://css-tricks.com/full-width-containers-limited-width-parents/
@mixin full-width {
  left: 50%;
  margin-left: -50vw;
  margin-right: -50vw;
  position: relative;
  right: 50%;
  width: 100vw;
}

/// Visually hides text, but text is still available for screen readers. Text is not focusable.
///
/// @group 03-utilities
///
/// @example - scss Usage
///  .screen-reader-text {
///    @include screen-reader-text;
///  }
///
/// @example html
///  <button type="button" class="button button--close">
///    <span class="screen-reader-text">Close</span>
///  </button>
@mixin screen-reader-text {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

/// Visually hides text, but it's still available for screen readers, and is still focusable.
///
/// @group 03-utilities
///
/// @example - scss Usage
///  .screen-reader-text {
///    @include screen-reader-text-focusable;
///  }
///
/// @example html
///  <button type="button" class="button screen-reader-text screen-reader-focusable">Close</button>
@mixin screen-reader-text-focusable {
  &:focus {
    border: auto;
    clip: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static;
    width: auto;
  }
}

/// Centers a background image, and makes sure it covers its container.
///
/// @group 03-utilities
///
/// @example - scss Usage
///  .image-as-background {
///    @include image-as-background
///  }
///
/// @example html
/// <div class="image-as-background" style="background-image: url(https://picsum.photos/1125/750/?image=1022);"></div>
@mixin image-as-background {
  background-position: center;
  background-size: cover;
}

/// Declare the element `height` and `width`.
///
/// @group 03-utilities
///
/// @param {Number} $width           - The element width.
/// @param {Number} $height [$width] - The element height.
///
/// @example - scss Usage
///  .size {
///    @include size(rem(150), rem(50));
///  }
///
/// @example html
///  <div class="size"></div>
///
/// @example - scss Usage
///  .size--one-parameter {
///    @include size(50px);
///  }
///
/// @example html
///  <div class="size size--one-parameter"></div>
@mixin size($width, $height: $width) {
  height: $height;
  width: $width;
}

/// Set an aspect ratio on an element.
///
/// @group 03-utilities
///
/// @param {Number} $width    - The width ratio, this value should be unitless.
/// @param {Number} $height   - The height ratio, this value should be unitless.
/// @param {Number} $el-width - The element width.
///
/// @example - scss Usage for 3:2 ratio
///  .ratio {
///    @include aspect-ratio(3, 2, 50%);
///  }
///
/// @example html
///  <div class="ratio"></div>
///
/// @example - scss Usage for 16:9 ratio
///  .ratio--16-9 {
///    @include aspect-ratio(16, 9, 50%);
///  }
///
/// @example html
///  <div class="ratio ratio--16-9"></div>
@mixin aspect-ratio($width, $height, $el-width) {
  @include size($el-width, 0);

  padding-top: $height / $width * $el-width;
}
