/// Create a `min-width` media query.
///
/// @group 03-media-queries
///
/// @param {Number} $min - The length to be used.
///
/// @example - scss Usage
///  .block {
///    display: none;
///
///    @include mq-min(breakpoint(desktop)) {
///      display: block;
///    }
///  }
@mixin mq-min($min) {
  @if type-of($min) != 'number' {
    @error '$min is not a length unit.';
  }

  @media only screen and (min-width: $min) {
    @content;
  }
}

/// Create a `max-width` media query.
/// `max-width` subtracts 1 unit to avoid conflicts with `min-width` queries.
///
/// @group 03-media-queries
///
/// @param {Number} $min - The length to be used.
///
/// @example - scss Usage
///  .block {
///    display: none;
///
///    @include mq-max(breakpoint(desktop)) {
///      display: block;
///    }
///  }
@mixin mq-max($max) {
  @if type-of($max) != 'number' {
    @error '$max is not a length unit.';
  }

  @media only screen and (max-width: $max - 1) {
    @content;
  }
}

/// Create a media query range (between `min-width` and `max-width`).
/// `max-width` subtracts 1 unit to avoid conflicts with `min-width` queries.
///
/// @group 03-media-queries
///
/// @param {Number} $min - The minimum breakpoint.
/// @param {Number} $max - The maximum breakpoint.
///
/// @example - scss Usage
///  .block {
///    @include mq(breakpoint(tablet-portrait), breakpoint(tablet-landscape)) {
///      display: block;
///    }
///  }
@mixin mq($min: null, $max: null) {
  @if $min == null {
    @include mq-max($max) {
      @content;
    }
  } @else if $max == null {
    @include mq-min($min) {
      @content;
    }
  } @else {
    @if type-of($min) != 'number' and type-of($max) != 'number' {
      @error 'One of the parameters is not a length unit.';
    }
    @media only screen and (min-width: $min) and (max-width: $max - 1) {
      @content;
    }
  }
}
