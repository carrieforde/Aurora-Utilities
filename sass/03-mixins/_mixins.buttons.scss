/// Generate button variations quickly and easily.
///
/// @group 03-buttons
///
/// @param {Color} $background - The desired background color.
/// @param {Color} $color [contrast($background)] - The text color.
/// @param {Color} $background-hover [lighten($background, 10%)] - The hover background color.
/// @param {Color} $color-hover [contrast($background-hover)] - The hover border (use shorthand).
/// @param {Color} $background-active [$background-hover] - The active background.
/// @param {Color} $color-active [contrast($background-active)] - The active border.
///
/// @example - scss Sample Usage
///   .button {
///     @include button($color-primary, $color-white);
///   }
///
/// @example - html
///  <button type="button" class="button">Click Me</button>
@mixin button(
  $background,
  $color: contrast($background),
  $background-hover: lighten($background, 10%),
  $color-hover: contrast($background-hover),
  $background-active: $background-hover,
  $color-active: contrast($background-active)
) {
  background-color: $background;
  border: none;
  color: $color;

  &:focus,
  &:hover {
    background-color: $background-hover;
    color: $color-hover;
  }

  &:disabled {
    background-color: tone($background, 20%);
  }

  &:active {
    background-color: $background-active;
    color: $color-active;
  }
}

/// Generate outline buttons.
///
/// @group 03-buttons
///
/// @param {String} $border                                  - The outline button's border.
/// @param {Color}  $color                                   - The button's text color.
/// @param {String} $border-hover      [$border]             - The hover border.
/// @param {Color}  $color-hover       [darken($color, 10%)] - The hover text color.
/// @param {Color}  $background-hover  [transparent]         - The hover background color.
/// @param {String} $border-active     [$border-hover]       - The active border.
/// @param {Color}  $color-active      [$color-hover]        - The active text color.
/// @param {Color}  $background-active [$background-hover]   - The active background color.
///
/// @example - scss Sample Usage
///   .button--outline {
///     @include button-outline(2px solid $color-primary, $color-primary, $color-hover: $color-white, $background-hover: $color-primary);
///   }
///
/// @example - html
///  <button type="button" class="button button--outline">Click Me</button>
@mixin button-outline(
  $border,
  $color,
  $border-hover: $border,
  $color-hover: darken($color, 10%),
  $background-hover: transparent,
  $border-active: $border-hover,
  $color-active: $color-hover,
  $background-active: $background-hover
) {
  background-color: transparent;
  border: $border;
  color: $color;

  &:focus,
  &:hover {
    background-color: $background-hover;
    border: $border-hover;
    color: $color-hover;
  }

  &:disabled {
    color: tone($color, 20%);
  }

  &:active {
    background-color: $background-active;
    border: $border-active;
    color: $color-active;
  }
}

/// Create buttons of different sizes.
///
/// @group 03-buttons
///
/// @param {Number}    $font-size                                                      - The button font size.
/// @param {Number}    $line-height [unitless-calc($base-line-height, $base-font-size)] - The text line height.
/// @param {Number(s)} $padding                                                         - The space around text.
///
/// @example - scss Sample Usage
///   .button--xl {
///     @include button-size(2.25rem);
///   }
///
/// @example - html
///  <button type="button" class="button button--xl">Click Me</button>
@mixin button-size($font-size, $line-height: unitless-calc($base-line-height, $base-font-size), $padding: 0.5em 1em) {
  font-size: $font-size;
  line-height: $line-height;
  padding: $padding;
}

/// Create different styles of button.
///
/// @group 03-buttons
///
/// @param {String} $string ['rounded'] - The type of button to produce.
///
/// @example - scss Sample Usage
///   .button--pill {
///     @include button-style('pill');
///   }
///
/// @example - html
///  <button type="button" class="button button--pill">Click Me</button>
/// @todo Consider adding more button styles see [Unicorn Buttons](http://unicorn-ui.com/buttons/builder/) & [these buttons](https://labs.loupbrun.ca/buttons/) are good inspiration.
@mixin button-style($string: 'rounded') {
  @if $string == 'rounded' {
    border-radius: 5px;
  } @else if $string == 'pill' {
    border-radius: 50px;
  } @else {
    @error '`#{inspect($string)}` button type does not exist!';
  }
}

/// Create a hamburger menu button. JavaScript interaction needs to be hooked up separately.
///
/// @group 03-buttons
///
/// @param {Color} $bar-color - The color of the hamburger bars.
/// @param {Color} $bar-hover - The color of the bars when the button is hovered.
/// @param {Number} $bar-height - The height of the bars.
/// @param {Number} $bar-width - The width of the bars.
/// @param {String} $bar-selector ['.bars'] - The selector used within the button to create the bars.
///
/// @example - scss Sample Usage
///  .button--hamburger {
///    @include hamburger-button($color-primary);
///  }
///
/// @example - html
///  <button type="button" class="button button--hamburger">
///    Menu
///    <span class="bars"></span>
///  </button>
@mixin hamburger-button(
  $bar-color,
  $bar-hover: $bar-color,
  $bar-height: 3px,
  $bar-width: 20px,
  $bar-selector: '.bars'
) {
  background-color: transparent;
  max-width: $bar-width;
  padding: $bar-height * 5 / 2 $bar-width / 2;
  position: relative;
  text-indent: -9999em;

  #{$bar-selector} {
    &,
    &:after,
    &:before {
      background-color: $bar-color;
      display: block;
      height: $bar-height;
      left: 0;
      margin: 0 auto;
      position: absolute;
      right: 0;
      transition: all 0.3s ease-in-out;
      width: $bar-width;
    }

    &:after,
    &:before {
      content: '';
    }

    // Top bar.
    &:before {
      top: $bar-height * -2;
    }

    // Middle bar.
    // stylelint-disable no-duplicate-selectors
    & {
      top: 50%;
      transform: translateY(-50%);
    }
    // stylelint-enable

    // Bottom bar.
    &:after {
      bottom: $bar-height * -2;
    }
  }

  &:hover {
    background-color: transparent;

    #{$bar-selector} {
      &,
      &:after,
      &:before {
        background-color: $bar-hover;
      }
    }
  }
}

/// Transforms the hamburger button into an X.
///
/// @group 03-buttons
///
/// @param {Color} $bar-color - The active color of bars.
/// @param {Number} $bar-height - The height of the bars.
/// @param {String} $bar-selector ['.bars'] - The selector used within the button to create the bars.
///
/// @example - scss Sample Usage
///  .button--hamburger {
///     @include hamburger-button($color-primary);
///
///     &--is-active {
///       @include hamburger-button-active($color-accent);
///     }
///  }
///
/// @example - html
///  <button type="button" class="button button--hamburger button--hamburger--is-active">
///    Menu
///    <span class="bars"></span>
///  </button>
@mixin hamburger-button-active($bar-color, $bar-hover: $bar-color, $bar-height: 3px, $bar-selector: '.bars') {
  &:hover,
  &:focus,
  &:active {
    #{$bar-selector} {
      background-color: transparent;
    }
  }
  #{$bar-selector} {
    // stylelint-disable no-duplicate-selectors
    & {
      background-color: transparent;
    }
    // stylelint-enable

    &:after,
    &:before {
      background-color: $bar-color;
      top: calc(50% - #{$bar-height} / 2);
      transform: translateY(-50%);
    }

    &:before {
      transform: rotate(45deg);
    }

    &:after {
      transform: rotate(-45deg);
    }
  }
}

/// Create a close button.
///
/// @group 03-buttons
///
/// @param {Color}  $x-color                               - The desired X color.
/// @param {Number} $x-size            [1rem]              - The font-size of the X.
/// @param {Color}  $background        [transparent]       - The desired background color.
/// @param {Color}  $hover-x-color     [$x-color]          - The hover X color.
/// @param {Color}  $background-hover  [$background]       - The hover background color.
/// @param {Color}  $active-x-color    [$hover-x-color]    - The active X color.
/// @param {Color}  $active-background [$hover-background] - The active background.
///
/// @example - scss Sample Usage
///  .button--close {
///    @include close-button($color-primary, transparent);
///  }
///
/// @example - html
///  <button type="button" class="button button--close">
///    <span class="screen-reader-text>Close</span> <!-- assumes a .screen-reader-text class using @include screen-reader exists. -->
///  </button>
@mixin close-button(
  $x-color,
  $x-size: 1rem,
  $background: transparent,
  $hover-x-color: $x-color,
  $hover-background: $background,
  $active-x-color: $hover-x-color,
  $active-background: $hover-background
) {
  background-color: $background;
  transition: background-color 0.3s ease-in-out;

  &:after {
    color: $x-color;
    content: '\00D7';
    transition: color 0.3s ease-in-out;
  }

  &:focus,
  &:hover {
    background-color: $hover-background;

    &:after {
      color: $hover-x-color;
    }
  }

  &:active {
    background-color: $active-background;

    &:after {
      color: $active-x-color;
    }
  }
}

/// Creates a Plus-Minus button. Requires JavaScript be implemented separately.
///
/// @group 03-buttons
///
/// @param {Color}   $bar-color                    - The color of the plus-minus bars.
/// @param {Number}  $bar-height                   - The height of the bars.
/// @param {Number}  $bar-width                    - The width of the bars.
/// @param {Color}   $background     [transparent] - The button background.
/// @param {Boolean} $include-active [false]       - Determines whether to include styling for the active state. Allows different classes or modifiers to be used.
/// @param {String} $active-selector [null]        - The name of the selector to trigger the active state. Can include `&`.
///
/// @example - scss Sample Usage
///  .button--plus-minus {
///    @include plus-minus-button($color-primary);
///  }
///
/// @example - html
///  <button type="button" class="button button--plus-minus">
///    <span class="screen-reader-text>Expand</span> <!-- assumes a .screen-reader-text class using @include screen-reader exists. -->
///  </button>
@mixin plus-minus-button(
  $bar-color,
  $bar-height: 3px,
  $bar-width: 20px,
  $background: transparent,
  $hover-bar-color: $bar-color,
  $hover-background: $background,
  $active-bar-color: $hover-bar-color,
  $active-background: $hover-background,
  $include-active: false,
  $active-selector: null
) {
  background-color: $background;
  padding: $bar-width / 2;
  position: relative;

  &:after,
  &:before {
    background-color: $bar-color;
    bottom: 0;
    content: '';
    display: block;
    height: $bar-height;
    left: 0;
    margin: auto;
    position: absolute;
    right: 0;
    top: 0;
    transition: all 0.3s ease-in-out;
    width: $bar-width;
  }

  &:after {
    transform: rotate(90deg);
  }

  &:focus,
  &:hover {
    background-color: $hover-background;

    &:after,
    &:before {
      color: $hover-bar-color;
    }
  }

  &:active {
    background-color: $active-background;

    &:after,
    &:before {
      color: $active-bar-color;
    }
  }

  @if $include-active {
    @if $active-selector == null {
      @error '`$include-active` requires `$active-selector` to be specified.';
    } @else {
      #{$active-selector} {
        @include plus-minus-button-active($active-bar-color, $active-background);
      }
    }
  }
}

/// Styles the active (minus) state of the Plus-Minus button.
///
/// @group 03-buttons
///
/// @param {Color} $active-bar-color                - The color of the minus.
/// @param {Color} $active-background [transparent] - The button background color.
///
/// @example - scss Sample Usage
///  .button--plus-minus {
///    @include plus-minus-button($color-primary);
///
///    &--is-active {
///      @include plus-minus-button-active($color-primary);
///    }
///  }
///
/// @example - html
///  <button type="button" class="button button--plus-minus button--plus-minus--is-active">
///    <span class="screen-reader-text>Expand</span> <!-- assumes a .screen-reader-text class using @include screen-reader exists. -->
///  </button>
@mixin plus-minus-button-active($active-bar-color, $active-background: transparent) {
  background-color: $active-background;

  &:after,
  &:before {
    background-color: $active-bar-color;
  }

  &:after {
    transform: rotate(180deg);
  }
}
